// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  name               String
  email              String    @unique
  role               Role      @default(BASIC)
  profession         String?
  certificate        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  posts              Post[]
  issues             Issue[]
  comments           Comment[]
  order              Order[]
  reviewWrittenByMe  Review[]  @relation("auther")
  reviewWrittenForMe Review[]  @relation("reviewed")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  body      String
  photo     String?
  autherId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  auther    User?     @relation(fields: [autherId], references: [id])
}

model Issue {
  id         String     @id @default(uuid())
  title      String
  body       String
  profession String
  photo      String?
  autherId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  comments   Comment[]
  auther     User       @relation(fields: [autherId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  autherId  String
  postId    String?
  issueId   String?
  auther    User     @relation(fields: [autherId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  issue     Issue?   @relation(fields: [issueId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  stars      Int      @default(0)
  autherId   String
  reviewedId String
  auther     User     @relation("auther", fields: [autherId], references: [id])
  reviewed   User     @relation("reviewed", fields: [reviewedId], references: [id])
}

model Product {
  id          String              @id @default(uuid())
  name        String
  description String?
  price       Float
  quantity    Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  orders      OrdersAndProducts[]
}

model Order {
  id        String              @id @default(uuid())
  notes     String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  deliverBy DateTime?
  price     Float
  ownerId   String
  owner     User                @relation(fields: [ownerId], references: [id])
  products  OrdersAndProducts[]
}

model OrdersAndProducts {
  productId  String
  orderId    String
  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

enum Role {
  BASIC
  PROFESSIONAL
  ADMIN
}
